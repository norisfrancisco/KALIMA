{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1C9-axuvv3pVmkxJPNOlABpmicyJBnQhT","authorship_tag":"ABX9TyPLCAfuYo16eCKSvd63d9+Q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# =============================================================================\n","# SCRIPT PARA DOWNLOAD DE DADOS MENSAIS DE PRECIPITA√á√ÉO CHIRPS\n","# √ÅREA: Unidade Administrativa de Chimoio (via GAUL FAO)\n","# Vers√£o Final - AGREGADA (v2.1 - Melhoria na Organiza√ß√£o)\n","# =============================================================================\n","\n","import ee\n","import pandas as pd\n","import os # Importa a biblioteca para lidar com o sistema de arquivos\n","\n","# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO DO GEE ---\n","try:\n","    ee.Initialize(project='lulc-463900')\n","    print(\"‚úÖ Google Earth Engine inicializado com sucesso.\")\n","except ee.EEException:\n","    print(\"‚ö†Ô∏è Falha na autentica√ß√£o do Google Earth Engine.\")\n","    print(\"    Por favor, rode 'earthengine authenticate' no seu terminal e tente novamente.\")\n","    exit()\n","\n","# --- 2. ENCONTRAR A UNIDADE ADMINISTRATIVA DE CHIMOIO (VIA GAUL FAO) ---\n","print(\"üîÑ Procurando a unidade administrativa de 'Cidade de Chimoio' no dataset GAUL...\")\n","gaul_distritos = ee.FeatureCollection('FAO/GAUL/2015/level2')\n","\n","unidade_chimoio = gaul_distritos.filter(ee.Filter.And(\n","    ee.Filter.eq('ADM0_NAME', 'Mozambique'),\n","    ee.Filter.eq('ADM1_NAME', 'Manica'),\n","    ee.Filter.eq('ADM2_NAME', 'Cidade de Chimoio')\n",")).first()\n","\n","if not unidade_chimoio:\n","    print(\"‚ùå ERRO: N√£o foi poss√≠vel encontrar a unidade administrativa de 'Cidade de Chimoio'.\")\n","    exit()\n","else:\n","    geometria_chimoio = unidade_chimoio.geometry()\n","    print(\"‚úÖ Unidade administrativa 'Cidade de Chimoio' encontrada com sucesso.\")\n","\n","# --- 3. DEFINI√á√ÉO DO PER√çODO E CARREGAMENTO DO CHIRPS DI√ÅRIO ---\n","data_inicio = '1981-01-01'\n","data_fim = '2025-07-31'\n","\n","print(f\"üîÑ Carregando dados DI√ÅRIOS de precipita√ß√£o CHIRPS de {data_inicio} a {data_fim}...\")\n","chirps_diario = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY').filterDate(data_inicio, data_fim)\n","\n","# --- 4. FUN√á√ÉO PARA AGREGAR DADOS DI√ÅRIOS EM MENSAIS ---\n","def agregar_mensal(ano_mes):\n","    \"\"\"Filtra a cole√ß√£o di√°ria para um ano/m√™s espec√≠fico e calcula a soma.\"\"\"\n","    data = ee.Date.fromYMD(ano_mes.get('year'), ano_mes.get('month'), 1)\n","    monthly_collection = chirps_diario.filterDate(data, data.advance(1, 'month'))\n","    monthly_sum = monthly_collection.sum()\n","    return monthly_sum.set('system:time_start', data.millis())\n","\n","# --- 5. CRIA√á√ÉO DA COLE√á√ÉO MENSAL AGREGADA ---\n","print(\"üîÑ Agregando dados DI√ÅRIOS para criar uma cole√ß√£o MENSAL...\")\n","anos = ee.List.sequence(ee.Date(data_inicio).get('year'), ee.Date(data_fim).get('year'))\n","meses = ee.List.sequence(1, 12)\n","\n","monthly_collection = ee.ImageCollection.fromImages(\n","    anos.map(lambda y: meses.map(lambda m: agregar_mensal(ee.Dictionary({'year': y, 'month': m}))))\n","    .flatten()\n",").filterDate(data_inicio, data_fim)\n","\n","# --- 6. EXTRA√á√ÉO E PROCESSAMENTO DOS DADOS ---\n","print(\"üîÑ Extraindo a precipita√ß√£o m√©dia MENSAL para a √°rea de Chimoio...\")\n","def extrair_valor_precip(imagem):\n","    \"\"\"Calcula a precipita√ß√£o m√©dia dentro do pol√≠gono para uma imagem mensal.\"\"\"\n","    data = imagem.date().format('YYYY-MM')\n","    valor_precip = imagem.reduceRegion(\n","        reducer=ee.Reducer.mean(),\n","        geometry=geometria_chimoio,\n","        scale=5000,\n","        maxPixels=1e9\n","    ).get('precipitation')\n","    return ee.Feature(None, {'date': data, 'precipitation': valor_precip})\n","\n","# Corrected function name in the map call\n","lista_precip = monthly_collection.map(extrair_valor_precip).getInfo()\n","\n","dados_precip = pd.DataFrame([f['properties'] for f in lista_precip['features']])\n","\n","dados_precip['date'] = pd.to_datetime(dados_precip['date'], format='%Y-%m')\n","dados_precip['precipitation'] = pd.to_numeric(dados_precip['precipitation'])\n","dados_precip.rename(columns={'date': 'DATE', 'precipitation': 'PRECIP_mm_monthly'}, inplace=True)\n","dados_precip.set_index('DATE', inplace=True)\n","dados_precip.dropna(inplace=True)\n","\n","print(\"\\n‚úÖ Dados MENSAIS de precipita√ß√£o extra√≠dos com sucesso para a √°rea de Chimoio!\")\n","print(f\"   - Total de meses com dados: {len(dados_precip)}\")\n","print(\"   - Primeiras 5 linhas:\")\n","print(dados_precip.head())\n","\n","# --- 7. SALVAR DADOS EM PASTA DEDICADA ---\n","# Define o nome da pasta de sa√≠da\n","pasta_saida = \"KALIMA_EXPORTS\"\n","os.makedirs(pasta_saida, exist_ok=True) # Cria a pasta se ela n√£o existir\n","\n","nome_arquivo = f\"precipitacao_MENSAL_{data_inicio}_{data_fim}.json\"\n","caminho_completo = os.path.join(pasta_saida, nome_arquivo) # Junta o nome da pasta com o nome do arquivo\n","\n","# Changed to to_json with orient='index'\n","dados_precip.to_json(caminho_completo, orient='index', indent=4)\n","print(f\"\\nüìÅ Dados salvos em: {caminho_completo}\")\n","print(f\"O arquivo est√° localizado em: {os.path.abspath(caminho_completo)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aDL6i2puSsmD","executionInfo":{"status":"ok","timestamp":1756145503426,"user_tz":180,"elapsed":8401,"user":{"displayName":"Francisco Noris","userId":"16193090916055511198"}},"outputId":"1a7b80ea-7dde-41c8-dc00-a5c911e38bf9"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Google Earth Engine inicializado com sucesso.\n","üîÑ Procurando a unidade administrativa de 'Cidade de Chimoio' no dataset GAUL...\n","‚úÖ Unidade administrativa 'Cidade de Chimoio' encontrada com sucesso.\n","üîÑ Carregando dados DI√ÅRIOS de precipita√ß√£o CHIRPS de 1981-01-01 a 2025-07-31...\n","üîÑ Agregando dados DI√ÅRIOS para criar uma cole√ß√£o MENSAL...\n","üîÑ Extraindo a precipita√ß√£o m√©dia MENSAL para a √°rea de Chimoio...\n","\n","‚úÖ Dados MENSAIS de precipita√ß√£o extra√≠dos com sucesso para a √°rea de Chimoio!\n","   - Total de meses com dados: 535\n","   - Primeiras 5 linhas:\n","            PRECIP_mm_monthly\n","DATE                         \n","1981-01-01         228.507718\n","1981-02-01         354.436000\n","1981-03-01          90.952332\n","1981-04-01          88.726840\n","1981-05-01          37.713464\n","\n","üìÅ Dados salvos em: KALIMA_EXPORTS/precipitacao_MENSAL_1981-01-01_2025-07-31.json\n","O arquivo est√° localizado em: /content/KALIMA_EXPORTS/precipitacao_MENSAL_1981-01-01_2025-07-31.json\n"]}]},{"cell_type":"code","source":["# =============================================================================\n","# SCRIPT DE AN√ÅLISE PRELIMINAR DE DADOS DE PRECIPITA√á√ÉO\n","# Automa√ß√£o de Pr√©-processamento, QC e Estat√≠sticas Iniciais\n","# Vers√£o: v3.0 - An√°lise de Precipita√ß√£o Completa\n","# =============================================================================\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","import os\n","from scipy.stats import linregress # Import linregress here\n","\n","# --- CONFIGURA√á√ÉO ---\n","# Coloque o nome do seu arquivo CSV aqui\n","# Updated file_path to match the output of the previous cell\n","file_path = \"KALIMA_EXPORTS/precipitacao_MENSAL_1981-01-01_2025-07-31.json\"\n","output_folder = \"analise_precipitacao_chimoio\"\n","\n","# --- Cria a pasta de sa√≠da se ela n√£o existir ---\n","os.makedirs(output_folder, exist_ok=True)\n","\n","# =============================================================================\n","# 1. CARREGAMENTO E PR√â-PROCESSAMENTO DOS DADOS\n","# =============================================================================\n","print(\"--- 1. Carregando e Pr√©-processando os Dados ---\")\n","try:\n","    # Changed to pd.read_json with orient='index'\n","    df = pd.read_json(file_path, orient='index')\n","    print(\"‚úÖ Arquivo de precipita√ß√£o carregado com sucesso.\")\n","except FileNotFoundError:\n","    print(f\"‚ùå ERRO: O arquivo '{file_path}' n√£o foi encontrado.\")\n","    print(\"Por favor, certifique-se de que o caminho e o nome do arquivo est√£o corretos.\")\n","    exit() # Exit the script if the file is not found\n","\n","# Converter a coluna de data para o formato datetime and set it as index\n","# The 'date' column is now the index after reading with orient='index', so this part needs adjustment.\n","# The index needs to be converted to datetime.\n","df.index = pd.to_datetime(df.index)\n","df.index.name = 'DATE' # Restore the index name\n","\n","print(\"\\nInforma√ß√µes do DataFrame:\")\n","df.info()\n","print(\"\\nPrimeiras 5 linhas dos dados:\")\n","print(df.head())\n","\n","\n","# =============================================================================\n","# 2. CONTROLE DE QUALIDADE (QC) E VERIFICA√á√ÉO DE FALHAS\n","# =============================================================================\n","print(\"\\n--- 2. Controle de Qualidade (QC) e Verifica√ß√£o de Falhas ---\")\n","\n","# Verifica√ß√£o de valores ausentes\n","missing_values = df.isnull().sum()\n","print(\"\\nValores ausentes por coluna:\")\n","print(missing_values)\n","if missing_values.sum() == 0:\n","    print(\"-> ‚úÖ Nenhum valor ausente encontrado. A s√©rie temporal est√° completa.\")\n","else:\n","    print(f\"-> ‚ö†Ô∏è ATEN√á√ÉO: {missing_values.sum()} valores ausentes encontrados. O ideal √© preench√™-los.\")\n","\n","# Verifica√ß√£o de valores inv√°lidos (e.g., precipita√ß√£o negativa)\n","negative_values = (df['PRECIP_mm_monthly'] < 0).sum()\n","if negative_values == 0:\n","    print(\"-> ‚úÖ Nenhum valor de precipita√ß√£o negativo ou inv√°lido encontrado.\")\n","else:\n","    print(f\"-> ‚ö†Ô∏è ATEN√á√ÉO: {negative_values} valores negativos de precipita√ß√£o foram encontrados.\")\n","\n","# Verifica√ß√£o de consist√™ncia da s√©rie temporal (meses esperados vs. meses encontrados)\n","# Calculate expected months based on the loaded data's date range\n","if not df.empty:\n","    expected_months = (df.index.max().year - df.index.min().year + 1) * 12 - (12 - df.index.max().month) - (df.index.min().month - 1)\n","    if len(df) == expected_months:\n","        print(\"-> ‚úÖ A s√©rie temporal possui a quantidade de meses esperada para o per√≠odo.\")\n","    else:\n","        print(f\"-> ‚ö†Ô∏è ATEN√á√ÉO: A s√©rie temporal tem {len(df)} meses, mas o esperado eram {expected_months}. Existem lacunas.\")\n","else:\n","    print(\"-> ‚ö†Ô∏è ATEN√á√ÉO: O DataFrame est√° vazio, n√£o √© poss√≠vel verificar a consist√™ncia da s√©rie temporal.\")\n","\n","\n","# =============================================================================\n","# 3. ESTAT√çSTICAS DESCRITIVAS INICIAIS\n","# =============================================================================\n","print(\"\\n--- 3. Estat√≠sticas Descritivas Iniciais ---\")\n","\n","# Estat√≠sticas gerais da precipita√ß√£o mensal\n","monthly_stats = df['PRECIP_mm_monthly'].describe()\n","print(\"\\nEstat√≠sticas Descritivas da Precipita√ß√£o Mensal:\")\n","print(monthly_stats)\n","\n","# Calcular a precipita√ß√£o total anual e suas estat√≠sticas\n","annual_precip = df.groupby(df.index.year)['PRECIP_mm_monthly'].sum()\n","annual_stats = annual_precip.describe()\n","print(\"\\nEstat√≠sticas Descritivas da Precipita√ß√£o Total Anual:\")\n","print(annual_stats)\n","\n","# An√°lise de tend√™ncia linear simples para a precipita√ß√£o anual\n","# Check if there are enough data points for linregress\n","if len(annual_precip) >= 2:\n","    years = annual_precip.index\n","    slope, intercept, r_value, p_value, std_err = linregress(years, annual_precip)\n","    print(\"\\nAn√°lise de Tend√™ncia da Precipita√ß√£o Anual:\")\n","    print(f\"- Inclina√ß√£o (tend√™ncia): {slope:.2f} mm/ano\")\n","    print(f\"- p-valor (signific√¢ncia): {p_value:.3f}\")\n","    if p_value < 0.05:\n","        print(\"-> ‚úÖ Tend√™ncia estatisticamente significativa.\")\n","    else:\n","        print(\"-> ‚ùå A tend√™ncia N√ÉO √© estatisticamente significativa ao n√≠vel de 5%.\")\n","else:\n","    print(\"\\nAn√°lise de Tend√™ncia da Precipita√ß√£o Anual:\")\n","    print(\"-> ‚ö†Ô∏è ATEN√á√ÉO: N√£o h√° dados anuais suficientes para calcular a tend√™ncia linear.\")\n","\n","\n","# =============================================================================\n","# 4. VISUALIZA√á√ÉO DOS DADOS\n","# =============================================================================\n","print(\"\\n--- 4. Gerando Visualiza√ß√µes ---\")\n","\n","# Check if the DataFrame is not empty before plotting\n","if not df.empty:\n","    # Gr√°fico 1: S√©rie Temporal da Precipita√ß√£o Mensal\n","    plt.figure(figsize=(15, 7))\n","    plt.plot(df.index, df['PRECIP_mm_monthly'], label='Precipita√ß√£o Mensal', color='royalblue')\n","    plt.title('S√©rie Temporal da Precipita√ß√£o Mensal em Chimoio') # Removed hardcoded year range\n","    plt.xlabel('Ano')\n","    plt.ylabel('Precipita√ß√£o Total Mensal (mm)')\n","    plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n","    plt.legend()\n","    plt.tight_layout()\n","    plt.savefig(os.path.join(output_folder, \"1_precip_timeseries_mensal.png\"), dpi=300)\n","    plt.close()\n","\n","    # Gr√°fico 2: Boxplot da Distribui√ß√£o Mensal (Sazonalidade)\n","    plt.figure(figsize=(12, 7))\n","    df['Month'] = df.index.month\n","    sns.boxplot(x='Month', y='PRECIP_mm_monthly', data=df, palette='viridis')\n","    plt.title('Distribui√ß√£o da Precipita√ß√£o Mensal por M√™s em Chimoio')\n","    plt.xlabel('M√™s')\n","    plt.ylabel('Precipita√ß√£o Mensal (mm)')\n","    plt.xticks(ticks=range(12), labels=['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'])\n","    plt.grid(True, linestyle='--', linewidth=0.5)\n","    plt.tight_layout()\n","    plt.savefig(os.path.join(output_folder, \"2_precip_boxplot_mensal.png\"), dpi=300)\n","    plt.close()\n","\n","    # Gr√°fico 3: Histograma da Distribui√ß√£o dos Dados\n","    plt.figure(figsize=(10, 6))\n","    sns.histplot(df['PRECIP_mm_monthly'], kde=True, bins=30, color='darkcyan')\n","    plt.title('Histograma da Frequ√™ncia de Precipita√ß√£o Mensal')\n","    plt.xlabel('Precipita√ß√£o Mensal (mm)')\n","    plt.ylabel('Frequ√™ncia (N√∫mero de Meses)')\n","    plt.grid(True, linestyle='--', linewidth=0.5)\n","    plt.tight_layout()\n","    plt.savefig(os.path.join(output_folder, \"3_precip_histograma.png\"), dpi=300)\n","    plt.close()\n","\n","    # Gr√°fico 4: Precipita√ß√£o Total Anual com Linha de Tend√™ncia\n","    if len(annual_precip) >= 2:\n","        plt.figure(figsize=(15, 7))\n","        plt.bar(annual_precip.index, annual_precip.values, color='steelblue', label='Precipita√ß√£o Anual')\n","        plt.plot(years, intercept + slope*years, color='red', linestyle='--', label=f'Tend√™ncia ({slope:.2f} mm/ano, p={p_value:.3f})')\n","        plt.title('Precipita√ß√£o Total Anual em Chimoio') # Removed hardcoded year range\n","        plt.xlabel('Ano')\n","        plt.ylabel('Precipita√ß√£o Anual (mm)')\n","        plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n","        plt.legend()\n","        plt.tight_layout()\n","        plt.savefig(os.path.join(output_folder, \"4_precip_tendencia_anual.png\"), dpi=300)\n","        plt.close()\n","    else:\n","         print(\"-> ‚ö†Ô∏è ATEN√á√ÉO: N√£o h√° dados anuais suficientes para gerar o gr√°fico de tend√™ncia.\")\n","\n","else:\n","    print(\"-> ‚ö†Ô∏è ATEN√á√ÉO: O DataFrame est√° vazio, n√£o √© poss√≠vel gerar visualiza√ß√µes.\")\n","\n","\n","print(\"\\n‚úÖ Pr√©-processamento, an√°lise e visualiza√ß√£o conclu√≠dos com sucesso.\")\n","print(f\"üìÅ Os resultados e gr√°ficos foram salvos na pasta: '{output_folder}'\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l4S5k5P_au7E","executionInfo":{"status":"ok","timestamp":1756145518465,"user_tz":180,"elapsed":3622,"user":{"displayName":"Francisco Noris","userId":"16193090916055511198"}},"outputId":"b0aee63a-8866-4f7e-cfec-08102c530c0b"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["--- 1. Carregando e Pr√©-processando os Dados ---\n","‚úÖ Arquivo de precipita√ß√£o carregado com sucesso.\n","\n","Informa√ß√µes do DataFrame:\n","<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 535 entries, 1981-01-01 to 2025-07-01\n","Data columns (total 1 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   PRECIP_mm_monthly  535 non-null    float64\n","dtypes: float64(1)\n","memory usage: 8.4 KB\n","\n","Primeiras 5 linhas dos dados:\n","            PRECIP_mm_monthly\n","DATE                         \n","1981-01-01         228.507718\n","1981-02-01         354.436000\n","1981-03-01          90.952332\n","1981-04-01          88.726840\n","1981-05-01          37.713464\n","\n","--- 2. Controle de Qualidade (QC) e Verifica√ß√£o de Falhas ---\n","\n","Valores ausentes por coluna:\n","PRECIP_mm_monthly    0\n","dtype: int64\n","-> ‚úÖ Nenhum valor ausente encontrado. A s√©rie temporal est√° completa.\n","-> ‚úÖ Nenhum valor de precipita√ß√£o negativo ou inv√°lido encontrado.\n","-> ‚úÖ A s√©rie temporal possui a quantidade de meses esperada para o per√≠odo.\n","\n","--- 3. Estat√≠sticas Descritivas Iniciais ---\n","\n","Estat√≠sticas Descritivas da Precipita√ß√£o Mensal:\n","count    535.000000\n","mean      98.109898\n","std      119.535633\n","min        0.227643\n","25%       14.923057\n","50%       48.874720\n","75%      132.651645\n","max      626.945867\n","Name: PRECIP_mm_monthly, dtype: float64\n","\n","Estat√≠sticas Descritivas da Precipita√ß√£o Total Anual:\n","count      45.000000\n","mean     1166.417673\n","std       263.608156\n","min       701.446686\n","25%       995.374699\n","50%      1171.692219\n","75%      1309.694194\n","max      1742.473577\n","Name: PRECIP_mm_monthly, dtype: float64\n","\n","An√°lise de Tend√™ncia da Precipita√ß√£o Anual:\n","- Inclina√ß√£o (tend√™ncia): 1.06 mm/ano\n","- p-valor (signific√¢ncia): 0.732\n","-> ‚ùå A tend√™ncia N√ÉO √© estatisticamente significativa ao n√≠vel de 5%.\n","\n","--- 4. Gerando Visualiza√ß√µes ---\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2589033474.py:136: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.boxplot(x='Month', y='PRECIP_mm_monthly', data=df, palette='viridis')\n"]},{"output_type":"stream","name":"stdout","text":["\n","‚úÖ Pr√©-processamento, an√°lise e visualiza√ß√£o conclu√≠dos com sucesso.\n","üìÅ Os resultados e gr√°ficos foram salvos na pasta: 'analise_precipitacao_chimoio'\n"]}]},{"cell_type":"code","source":["# =============================================================================\n","# SCRIPT DE AN√ÅLISE COMPLETA DE PRECIPITA√á√ÉO\n","# Vers√£o: v3.6 - Final (Consolida√ß√£o de Ajustes)\n","# =============================================================================\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import matplotlib.dates as mdates\n","import seaborn as sns\n","import numpy as np\n","import os\n","\n","# --- CONFIGURA√á√ÉO ---\n","file_path = \"KALIMA_EXPORTS/precipitacao_MENSAL_1981-01-01_2025-07-31.json\"\n","output_folder = \"KALIMA_EXPORTS\"\n","os.makedirs(output_folder, exist_ok=True)\n","\n","# --- CARREGAMENTO DOS DADOS ---\n","print(\"--- Carregando os Dados ---\")\n","try:\n","    df_precip = pd.read_json(file_path, orient='index')\n","    df_precip.columns = ['PRECIP_mm_monthly']\n","    df_precip.index = pd.to_datetime(df_precip.index)\n","    df_precip.index.name = 'DATE'\n","    print(\"‚úÖ Arquivo de precipita√ß√£o carregado com sucesso.\")\n","except FileNotFoundError:\n","    print(f\"‚ùå ERRO: O arquivo '{file_path}' n√£o foi encontrado.\")\n","    exit()\n","except ValueError as e:\n","    print(f\"‚ùå ERRO ao ler o arquivo JSON. Verifique o formato do arquivo: {e}\")\n","    exit()\n","\n","# --- C√ÅLCULOS PRINCIPAIS ---\n","print(\"\\n--- Realizando C√°lculos Principais ---\")\n","\n","# 1. Definir o per√≠odo de refer√™ncia\n","ref_start_year = 1995\n","ref_end_year = 2024\n","ref_period = df_precip.loc[f'{ref_start_year}':f'{ref_end_year}']\n","print(f\"‚úÖ Per√≠odo de refer√™ncia definido: {ref_start_year}-{ref_end_year}\")\n","\n","# 2. Calcular a climatologia com a m√©dia e os percentis (25% e 75%)\n","climatologia = ref_period.groupby(ref_period.index.month).agg(\n","    clima_mean=('PRECIP_mm_monthly', 'mean'),\n","    clima_p25=('PRECIP_mm_monthly', lambda x: np.percentile(x, 25)),\n","    clima_p75=('PRECIP_mm_monthly', lambda x: np.percentile(x, 75))\n",")\n","climatologia.index = climatologia.index.map(lambda m: pd.to_datetime(f'2000-{m}-01').strftime('%b'))\n","print(\"‚úÖ Climatologia m√©dia mensal e percentis calculados.\")\n","\n","# 3. Pegar os dados \"observados\" do √∫ltimo ano dispon√≠vel para plotar as barras\n","this_year = df_precip.index.year.max()\n","observado = df_precip.loc[f'{this_year}'].copy()\n","observado.index = observado.index.map(lambda d: d.strftime('%b'))\n","print(f\"‚úÖ Dados do √∫ltimo ano dispon√≠vel ({this_year}) para plotagem obtidos.\")\n","\n","# 4. Encontrar os valores para o m√™s a ser destacado (o mais recente nos dados)\n","latest_month_data = df_precip.tail(1)\n","if not latest_month_data.empty:\n","    mes_destaque_date = latest_month_data.index[0]\n","    mes_destaque = mes_destaque_date.strftime('%b')\n","    valor_mes = latest_month_data['PRECIP_mm_monthly'].iloc[0]\n","    climatologia_mes_destaque = climatologia.loc[mes_destaque, 'clima_mean']\n","\n","    if climatologia_mes_destaque != 0:\n","        percentual_diferenca = ((valor_mes - climatologia_mes_destaque) / climatologia_mes_destaque) * 100\n","    else:\n","        percentual_diferenca = float('inf') if valor_mes > 0 else 0\n","    print(f\"‚úÖ Dados para o m√™s de destaque ({mes_destaque} {mes_destaque_date.year}) obtidos.\")\n","else:\n","    print(\"‚ùå ERRO: N√£o h√° dados suficientes para o √∫ltimo m√™s para destaque.\")\n","    mes_destaque, valor_mes, percentual_diferenca, climatologia_mes_destaque = [None] * 4\n","\n","# --- GERA√á√ÉO DOS GR√ÅFICOS ---\n","print(\"\\n--- Gerando gr√°ficos aprimorados ---\")\n","print(f\"-> Usando o ano '{this_year}' para 'Observado' e '{ref_start_year}-{ref_end_year}' para 'Climatologia'.\")\n","\n","\n","# Gr√°fico 1: Precipita√ß√£o vs. Climatologia (com faixa de varia√ß√£o)\n","if not observado.empty and not climatologia.empty:\n","    plt.style.use('seaborn-v0_8-whitegrid')\n","    plt.rcParams.update({'font.size': 12, 'axes.labelsize': 14, 'axes.titlesize': 16})\n","\n","    fig, ax = plt.subplots(figsize=(14, 8))\n","\n","    sns.barplot(x=observado.index, y='PRECIP_mm_monthly', data=observado,\n","                     color='dodgerblue', label=f'Observado ({this_year})', zorder=2, ax=ax)\n","\n","    ax.fill_between(climatologia.index, climatologia['clima_p25'], climatologia['clima_p75'],\n","                    color='gray', alpha=0.2, label='Varia√ß√£o Normal (P25-P75)', zorder=1)\n","\n","    ax.plot(climatologia.index, climatologia['clima_mean'],\n","            color='red', marker='o', linewidth=2.5, label=f'Climatologia M√©dia ({ref_start_year}‚Äì{ref_end_year})', zorder=3)\n","\n","    if mes_destaque and valor_mes is not None:\n","        meses_labels = [m.strftime('%b') for m in pd.date_range('2000-01-01', periods=12, freq='MS')]\n","        try:\n","            pos_destaque = meses_labels.index(mes_destaque)\n","            ax.plot(pos_destaque, valor_mes, marker='D', markersize=10, color='gold', zorder=5,\n","                    markeredgecolor='black', markeredgewidth=1.5)\n","\n","            if percentual_diferenca is not None and percentual_diferenca != float('inf'):\n","                texto_anotacao = f\"{valor_mes:.1f} mm\\n({percentual_diferenca:+.1f}%)\"\n","            else:\n","                texto_anotacao = f\"{valor_mes:.1f} mm\\n(Infinito%)\"\n","\n","            ax.annotate(texto_anotacao, xy=(pos_destaque, valor_mes), xytext=(0, 20),\n","                        textcoords='offset points', ha='center',\n","                        bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"black\", lw=0.5))\n","        except ValueError:\n","            print(f\"‚ö†Ô∏è ATEN√á√ÉO: O m√™s de destaque '{mes_destaque}' n√£o foi encontrado nos r√≥tulos do eixo X.\")\n","\n","    ax.set_title(f'Chimoio ‚Äî Precipita√ß√£o Mensal vs Climatologia ({ref_start_year}‚Äì{ref_end_year})', pad=20)\n","    ax.set_xlabel('M√™s')\n","    ax.set_ylabel('Precipita√ß√£o Total (mm)')\n","    ax.set_xticklabels([m.strftime('%b') for m in pd.date_range('2000-01-01', periods=12, freq='MS')])\n","    ax.grid(True, which='both', linestyle='--', linewidth=0.5, zorder=0)\n","    ax.legend(loc='upper right', frameon=True)\n","\n","    file_name = \"1_precipitacao_vs_climatologia_variacao.png\"\n","    plt.tight_layout()\n","    plt.savefig(os.path.join(output_folder, file_name), dpi=300)\n","    plt.close()\n","    print(f\"‚úÖ Gr√°fico '{file_name}' salvo na pasta '{output_folder}'.\")\n","else:\n","    print(\"‚ùå ERRO: N√£o h√° dados suficientes para gerar o gr√°fico 1.\")\n","\n","# Gr√°fico 2: Gr√°fico de Anomalias (Precipita√ß√£o vs. Climatologia)\n","if not observado.empty and not climatologia.empty:\n","    fig, ax = plt.subplots(figsize=(14, 8))\n","\n","    anomalias = observado['PRECIP_mm_monthly'] - climatologia['clima_mean']\n","\n","    cores = anomalias.apply(lambda x: 'dodgerblue' if x >= 0 else 'firebrick')\n","\n","    meses_ordem = ['Jan', 'Fev', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n","    anomalias_ordenadas = anomalias.reindex(meses_ordem)\n","\n","    sns.barplot(x=anomalias_ordenadas.index, y=anomalias_ordenadas.values, palette=cores.tolist(), ax=ax, zorder=2)\n","\n","    ax.axhline(0, color='black', linewidth=1.5, linestyle='-', zorder=3)\n","\n","    if mes_destaque and valor_mes is not None:\n","        anomalia_mes_destaque = anomalias.loc[mes_destaque]\n","        ax.plot(mes_destaque, anomalia_mes_destaque, marker='D', markersize=10, color='gold', zorder=5,\n","                markeredgecolor='black', markeredgewidth=1.5)\n","\n","        if percentual_diferenca is not None and percentual_diferenca != float('inf'):\n","            texto_anomalia = f\"{anomalia_mes_destaque:+.1f} mm\\n({percentual_diferenca:+.1f}%)\"\n","        elif percentual_diferenca == float('inf'):\n","            texto_anomalia = f\"{anomalia_mes_destaque:+.1f} mm\\n(Infinito%)\"\n","        else:\n","            texto_anomalia = f\"{anomalia_mes_destaque:+.1f} mm\"\n","\n","        ax.annotate(texto_anomalia, xy=(mes_destaque, anomalia_mes_destaque), xytext=(0, 20),\n","                    textcoords='offset points', ha='center',\n","                    bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"black\", lw=0.5))\n","\n","    ax.set_title(f'Chimoio ‚Äî Anomalia da Precipita√ß√£o Mensal ({this_year}) vs. Climatologia ({ref_start_year}‚Äì{ref_end_year})', pad=20)\n","    ax.set_xlabel('M√™s')\n","    ax.set_ylabel('Anomalia de Precipita√ß√£o (mm)')\n","    ax.grid(True, which='both', linestyle='--', linewidth=0.5, zorder=0)\n","\n","    file_name = \"2_precipitacao_anomalia_mensal.png\"\n","    plt.tight_layout()\n","    plt.savefig(os.path.join(output_folder, file_name), dpi=300)\n","    plt.close()\n","    print(f\"‚úÖ Gr√°fico '{file_name}' salvo na pasta '{output_folder}'.\")\n","else:\n","    print(\"‚ùå ERRO: N√£o h√° dados suficientes para gerar o gr√°fico 2.\")\n","\n","print(\"\\n‚úÖ An√°lise e visualiza√ß√£o conclu√≠das com sucesso.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AtMqINl-cXXd","executionInfo":{"status":"ok","timestamp":1756148786718,"user_tz":180,"elapsed":1305,"user":{"displayName":"Francisco Noris","userId":"16193090916055511198"}},"outputId":"b35c1479-809a-4009-ef6b-84715de62cc8"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Carregando os Dados ---\n","‚úÖ Arquivo de precipita√ß√£o carregado com sucesso.\n","\n","--- Realizando C√°lculos Principais ---\n","‚úÖ Per√≠odo de refer√™ncia definido: 1995-2024\n","‚úÖ Climatologia m√©dia mensal e percentis calculados.\n","‚úÖ Dados do √∫ltimo ano dispon√≠vel (2025) para plotagem obtidos.\n","‚úÖ Dados para o m√™s de destaque (Jul 2025) obtidos.\n","\n","--- Gerando gr√°ficos aprimorados ---\n","-> Usando o ano '2025' para 'Observado' e '1995-2024' para 'Climatologia'.\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-4088761336.py:116: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n","  ax.set_xticklabels([m.strftime('%b') for m in pd.date_range('2000-01-01', periods=12, freq='MS')])\n"]},{"output_type":"stream","name":"stdout","text":["‚úÖ Gr√°fico '1_precipitacao_vs_climatologia_variacao.png' salvo na pasta 'KALIMA_EXPORTS'.\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-4088761336.py:139: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=anomalias_ordenadas.index, y=anomalias_ordenadas.values, palette=cores.tolist(), ax=ax, zorder=2)\n"]},{"output_type":"stream","name":"stdout","text":["‚úÖ Gr√°fico '2_precipitacao_anomalia_mensal.png' salvo na pasta 'KALIMA_EXPORTS'.\n","\n","‚úÖ An√°lise e visualiza√ß√£o conclu√≠das com sucesso.\n"]}]}]}